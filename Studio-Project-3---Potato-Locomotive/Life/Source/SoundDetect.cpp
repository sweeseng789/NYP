#include "SoundDetect.h"

/******************************************************************************/
/*!
\brief
constructor
\pos
position of the source of the sound
\soundRadius
the radius of the sphere generated by the sound
\soundMultiplier
a scalar value to adjust the sound's radius
*/
/******************************************************************************/
SoundDetect::SoundDetect(Vector3 pos, float soundRadius, float soundMultiplier)
{
	soundBound.Type = CollisionBox::CT_SPHERE;
	
	soundBound.Position = pos;

	this->soundRadius = soundRadius;
	this->soundMultiplier = soundMultiplier;
	soundBound.radius = soundRadius * soundMultiplier;
}
/******************************************************************************/
/*!
\brief
constructor
*/
/******************************************************************************/
SoundDetect::SoundDetect()
{
	soundRadius = 1;
	soundBound.Type = CollisionBox::CT_SPHERE;
	soundMultiplier = 1;
}
/******************************************************************************/
/*!
\brief
destructor
*/
/******************************************************************************/
SoundDetect::~SoundDetect()
{

}

/******************************************************************************/
/*!
\brief
Returns bool if Enemy Hears sound
\return
TRUE = Target hears sound
*/
/******************************************************************************/
bool SoundDetect::heard(Vector3 &target)
{
	CollisionBox TargetPos;
	TargetPos.Type = CollisionBox::CT_POINT;
	TargetPos.Position = target;
	return CollisionBox::checkCollision(soundBound, TargetPos);
}

//Accessors
/******************************************************************************/
/*!
\brief
Gets the multiplier of sound
\return
soundMultiplier
*/
/******************************************************************************/
float SoundDetect::getSoundMultplier(void)const
{
	return soundMultiplier;
}
/******************************************************************************/
/*!
\brief
Gets the radius of sound
\return
soundRadius
*/
/******************************************************************************/
float SoundDetect::getSoundRadius(void)const
{
	return soundRadius;
}
/******************************************************************************/
/*!
\brief
Gets the Sound Collision Bound of sound
\return
soundBound
*/
/******************************************************************************/
CollisionBox SoundDetect::getSoundBound(void)const
{
	return soundBound;
}


//Mutators
/******************************************************************************/
/*!
\brief
Sets the radius of sound
\soundRadius
soundRadius
*/
/******************************************************************************/
void SoundDetect::setSoundRadius(float soundRadius)
{
	this->soundRadius = soundRadius;
	this->soundBound.radius = soundRadius * this->soundMultiplier;
}
/******************************************************************************/
/*!
\brief
Sets the multiplier of sound
\soundMultiplier
sound's multiplier
*/
/******************************************************************************/
void SoundDetect::setSoundMultiplier(float soundMultiplier)
{
	this->soundMultiplier = soundMultiplier;
	this->soundBound.radius = soundRadius * soundMultiplier;
}
/******************************************************************************/
/*!
\brief
Sets the source of sound
\soundMultiplier
sound's source
*/
/******************************************************************************/
void SoundDetect::setSource(Vector3 source)
{
	this->soundBound.Position = source;
}